name: Build Windows EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Clean old build
      run: |
        if exist build rmdir /s /q build
        if exist dist rmdir /s /q dist
      continue-on-error: true
    
    - name: Build executable
      run: |
        python -m PyInstaller --clean telegram_monitor.spec
    
    - name: List dist contents
      run: |
        dir dist
        if exist "dist\TelegramMonitor.exe" (
          echo EXE file exists
          dir dist\TelegramMonitor.exe
        ) else (
          echo EXE file NOT found
          echo Checking in TelegramMonitor folder...
          dir dist\TelegramMonitor
        )
    
    - name: Find executable
      id: find_exe
      run: |
        if exist "dist\TelegramMonitor.exe" (
          echo path=dist\TelegramMonitor.exe >> $GITHUB_OUTPUT
          echo "Found standalone EXE"
        ) else if exist "dist\TelegramMonitor\TelegramMonitor.exe" (
          echo path=dist\TelegramMonitor\TelegramMonitor.exe >> $GITHUB_OUTPUT
          echo "Found in folder"
        ) else (
          echo "EXE not found"
          exit 1
        )
      shell: cmd
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: TelegramMonitor-Windows
        path: ${{ steps.find_exe.outputs.path }}
    
    - name: Create release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_exe.outputs.path }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

