name: Build Windows EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Clean old build
      shell: cmd
      run: |
        if exist build rmdir /s /q build
        if exist dist rmdir /s /q dist
      continue-on-error: true
    
    - name: Build executable
      shell: cmd
      run: |
        python -m PyInstaller --clean telegram_monitor.spec
    
    - name: Find executable path
      id: find_exe
      run: |
        if [ -f "dist/TelegramMonitor.exe" ]; then
          echo "path=dist/TelegramMonitor.exe" >> $GITHUB_OUTPUT
          echo "Found standalone EXE"
        elif [ -f "dist/TelegramMonitor/TelegramMonitor.exe" ]; then
          echo "path=dist/TelegramMonitor/TelegramMonitor.exe" >> $GITHUB_OUTPUT
          echo "Found in folder"
        else
          echo "EXE not found in dist"
          ls -la dist/
          exit 1
        fi
        echo "Executable path: ${{ steps.find_exe.outputs.path }}"
    
    - name: List dist contents (Windows)
      shell: cmd
      run: |
        dir dist
        if exist "dist\TelegramMonitor\TelegramMonitor.exe" (
          dir dist\TelegramMonitor\TelegramMonitor.exe
        )
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: TelegramMonitor-Windows
        path: ${{ steps.find_exe.outputs.path }}
        retention-days: 7
    
    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_exe.outputs.path }}
        tag_name: ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

